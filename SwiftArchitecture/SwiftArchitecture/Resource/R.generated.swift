//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `header`.
    static let header = Rswift.ColorResource(bundle: R.hostingBundle, name: "header")
    
    /// `UIColor(named: "header", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.header, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `CityData.json`.
    static let cityDataJson = Rswift.FileResource(bundle: R.hostingBundle, name: "CityData", pathExtension: "json")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `TestWeather.json`.
    static let testWeatherJson = Rswift.FileResource(bundle: R.hostingBundle, name: "TestWeather", pathExtension: "json")
    
    /// `bundle.url(forResource: "CityData", withExtension: "json")`
    static func cityDataJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cityDataJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TestWeather", withExtension: "json")`
    static func testWeatherJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.testWeatherJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 9 images.
  struct image {
    /// Image `btn_check_normal`.
    static let btn_check_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_check_normal")
    /// Image `btn_check_selected`.
    static let btn_check_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_check_selected")
    /// Image `btn_favorite_normal`.
    static let btn_favorite_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_favorite_normal")
    /// Image `btn_favorite_selected`.
    static let btn_favorite_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_favorite_selected")
    /// Image `btn_filter`.
    static let btn_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_filter")
    /// Image `btn_normal`.
    static let btn_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_normal")
    /// Image `icon_next`.
    static let icon_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_next")
    /// Image `icon_no_image`.
    static let icon_no_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_no_image")
    /// Image `icon_splash`.
    static let icon_splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_splash")
    
    /// `UIImage(named: "btn_check_normal", bundle: ..., traitCollection: ...)`
    static func btn_check_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_check_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_check_selected", bundle: ..., traitCollection: ...)`
    static func btn_check_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_check_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_favorite_normal", bundle: ..., traitCollection: ...)`
    static func btn_favorite_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_favorite_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_favorite_selected", bundle: ..., traitCollection: ...)`
    static func btn_favorite_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_favorite_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_filter", bundle: ..., traitCollection: ...)`
    static func btn_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_filter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_normal", bundle: ..., traitCollection: ...)`
    static func btn_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_next", bundle: ..., traitCollection: ...)`
    static func icon_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_no_image", bundle: ..., traitCollection: ...)`
    static func icon_no_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_no_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_splash", bundle: ..., traitCollection: ...)`
    static func icon_splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_splash, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `AreaFilterTableViewCell`.
    static let areaFilterTableViewCell = _R.nib._AreaFilterTableViewCell()
    /// Nib `AreaFilterViewController`.
    static let areaFilterViewController = _R.nib._AreaFilterViewController()
    /// Nib `PrefectureListTableViewCell`.
    static let prefectureListTableViewCell = _R.nib._PrefectureListTableViewCell()
    /// Nib `PrefectureListViewController`.
    static let prefectureListViewController = _R.nib._PrefectureListViewController()
    /// Nib `WeatherInfoView`.
    static let weatherInfoView = _R.nib._WeatherInfoView()
    /// Nib `WeatherViewController`.
    static let weatherViewController = _R.nib._WeatherViewController()
    
    /// `UINib(name: "AreaFilterTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.areaFilterTableViewCell) instead")
    static func areaFilterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.areaFilterTableViewCell)
    }
    
    /// `UINib(name: "AreaFilterViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.areaFilterViewController) instead")
    static func areaFilterViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.areaFilterViewController)
    }
    
    /// `UINib(name: "PrefectureListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prefectureListTableViewCell) instead")
    static func prefectureListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prefectureListTableViewCell)
    }
    
    /// `UINib(name: "PrefectureListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.prefectureListViewController) instead")
    static func prefectureListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prefectureListViewController)
    }
    
    /// `UINib(name: "WeatherInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weatherInfoView) instead")
    static func weatherInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weatherInfoView)
    }
    
    /// `UINib(name: "WeatherViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weatherViewController) instead")
    static func weatherViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weatherViewController)
    }
    
    static func areaFilterTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AreaFilterTableViewCell? {
      return R.nib.areaFilterTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AreaFilterTableViewCell
    }
    
    static func areaFilterViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.areaFilterViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func prefectureListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrefectureListTableViewCell? {
      return R.nib.prefectureListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrefectureListTableViewCell
    }
    
    static func prefectureListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.prefectureListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func weatherInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.weatherInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func weatherViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.weatherViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AreaFilterTableViewCell`.
    static let areaFilterTableViewCell: Rswift.ReuseIdentifier<AreaFilterTableViewCell> = Rswift.ReuseIdentifier(identifier: "AreaFilterTableViewCell")
    /// Reuse identifier `PrefectureListTableViewCell`.
    static let prefectureListTableViewCell: Rswift.ReuseIdentifier<PrefectureListTableViewCell> = Rswift.ReuseIdentifier(identifier: "PrefectureListTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AreaFilterTableViewCell.validate()
      try _AreaFilterViewController.validate()
      try _PrefectureListTableViewCell.validate()
      try _PrefectureListViewController.validate()
    }
    
    struct _AreaFilterTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AreaFilterTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AreaFilterTableViewCell"
      let name = "AreaFilterTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AreaFilterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AreaFilterTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_check_normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_check_normal' is used in nib 'AreaFilterTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_check_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_check_selected' is used in nib 'AreaFilterTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AreaFilterViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AreaFilterViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_check_normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_check_normal' is used in nib 'AreaFilterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_check_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_check_selected' is used in nib 'AreaFilterViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PrefectureListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PrefectureListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PrefectureListTableViewCell"
      let name = "PrefectureListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrefectureListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrefectureListTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_favorite_normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_favorite_normal' is used in nib 'PrefectureListTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_favorite_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_favorite_selected' is used in nib 'PrefectureListTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_next' is used in nib 'PrefectureListTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PrefectureListViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PrefectureListViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_check_normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_check_normal' is used in nib 'PrefectureListViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_check_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_check_selected' is used in nib 'PrefectureListViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_filter' is used in nib 'PrefectureListViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_normal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_normal' is used in nib 'PrefectureListViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _WeatherInfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WeatherInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _WeatherViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WeatherViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
